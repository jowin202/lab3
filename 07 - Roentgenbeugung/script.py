import numpy as np
import matplotlib.pyplot as plt
from math import log
from math import sin

def regression(x,y):
    if len(x) != len(y):
        print("Fehler bei Regression")
        exit()
    
    xm = sum(x)/len(x)
    ym = sum(y)/len(y)
    
    d1 = 0
    d2 = 0
    for i in range(len(x)):
        d1 += (x[i] - xm)*(y[i] - ym)
        d2 += (x[i] - xm)**2
        
    return d1/d2, ym - d1/d2 * xm 

def approx_zero(x,y):
    k, d = regression(x,y)
    return -d/k


def find_max(x,y,d):
    maxima = []
    for i in range(d,len(x)-d):
        is_max = True
        for element in y[i-d:i+d+1]:
            if element > y[i]:
                is_max = False
        if is_max:
            maxima.append((i,x[i],y[i]))
    return maxima


nacl_beta = [2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25, 25.1, 25.2, 25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26, 26.1, 26.2, 26.3, 26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27, 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 28, 28.1, 28.2, 28.3, 28.4, 28.5, 28.6, 28.7, 28.8, 28.9, 29, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7, 30.8, 30.9, 31, 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8, 31.9, 32]

nacl_rate = [2.5, 2.5, 1.77, 1.83, 2.4, 2.83, 3.13, 4.2, 6.5, 16.93, 34.67, 44.2, 60.2, 69.2, 85.17, 86.03, 101.23, 98.53, 109.8, 102.9, 107.8, 103.33, 109.9, 99.47, 102.23, 96.17, 101.93, 91.53, 91.8, 89.13, 93.87, 87.93, 88.57, 87.37, 89.63, 82.4, 108.33, 179.63, 194.53, 156.7, 141.03, 116.3, 100.8, 84.17, 97.67, 416.53, 532.37, 381.63, 310.73, 230.83, 131.1, 74.73, 72.5, 63.37, 60.5, 58.57, 58.07, 51.6, 48.6, 47.17, 46.33, 41.47, 40.8, 35.83, 36.17, 34.77, 34.4, 31.23, 30.33, 29.13, 30, 27.27, 26.07, 23.8, 23.07, 20.97, 22.03, 19.47, 20.7, 17.23, 18.63, 18.5, 19.17, 17.43, 18.87, 17.7, 19, 17.33, 18.97, 16.5, 18.67, 16.87, 17.9, 18.57, 17.3, 16.4, 17.33, 18.13, 18.2, 17.77, 23.33, 24.07, 34.17, 40.6, 30.1, 24.2, 23.83, 19.5, 18.17, 17.3, 16.73, 16.63, 17.03, 15.8, 18.57, 15.7, 18.43, 22.1, 54.9, 101.53, 87.87, 50.53, 41.3, 29.97, 20.53, 18.3, 17.1, 14.93, 17.13, 14.17, 16.27, 14.57, 15.03, 15.03, 14.07, 13.7, 14.73, 14.3, 13.93, 13.2, 15.2, 11.5, 12.83, 12.13, 12.63, 11.73, 12, 12.6, 12.6, 11.5, 11.67, 10.17, 11.83, 10.7, 10.43, 10.27, 9.73, 9.63, 11.9, 10.43, 9.93, 9.37, 10.9, 9.6, 10.13, 11.23, 11.03, 12.7, 15.93, 19.37, 16.33, 11.33, 10.27, 8.93, 9.43, 9.33, 9.8, 7.8, 8.8, 7.83, 7.9, 7.33, 8.63, 8.2, 8.43, 7.97, 7.27, 8.5, 7.93, 8.03, 7.73, 8.53, 13.93, 26, 45.67, 33.5, 25.67, 14.43, 11.9, 9.8, 9.2, 7.97, 7.03, 7.77, 6.4, 6.83, 6.73, 6.4, 6.87, 7.47, 6.83, 5.63, 6.67, 6.63, 5.8, 5.27, 5.9, 6.63, 5.67, 6.17, 5.5, 5.8, 5.67, 5.37, 5.83, 5.43, 5.17, 5.13, 4.43, 4.47, 4.93, 4.2, 6.03, 5, 5.07, 4.7, 5.33, 5.9, 7.23, 8.07, 6.07, 5.53, 4.03, 4.73, 4.73, 4.77, 4.3, 4.5, 4.47, 4.7, 4.37, 4.3, 4.43, 4, 4.03, 4.07, 3.2, 3.33, 3.63, 4.07, 4.13, 4.17, 3.9, 3.77, 4.53, 3.13, 3.57, 3.87, 4.03, 3.93, 3.73, 4.9, 5.2, 8.2, 11.1, 8.18, 6.93, 6.33, 4.53, 3.77, 4.9, 3.83, 4.33, 3.93, 3.07, 4.33, 3.53, 2.6, 3.47, 3.43, 3.1, 2.97, 3.4, 2.9, 2.9, 2.77]


kristall_beta = [3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25, 25.1, 25.2, 25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26, 26.1, 26.2, 26.3, 26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27, 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 28, 28.1, 28.2, 28.3, 28.4, 28.5, 28.6, 28.7, 28.8, 28.9, 29, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7, 30.8, 30.9, 31, 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8, 31.9, 32, 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9, 33, 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34]

kristall_rate = [6.57, 6.53, 6.2, 7.17, 7.3, 6.1, 7.07, 8.17, 7.47, 7.4, 7.87, 8.23, 8.83, 9.5, 10.17, 11.23, 10.73, 12.33, 14.43, 23.77, 65.1, 141.1, 234, 302.3, 366.07, 403.5, 443.1, 469.27, 493.03, 503.33, 529.6, 546.77, 540.03, 556.13, 552.9, 558.93, 550.33, 549.4, 556.73, 551.57, 553.5, 542.83, 540.83, 538.67, 544.8, 540.03, 539.6, 530.3, 529.27, 514.87, 515.87, 508.1, 508.17, 500, 495.77, 489.7, 482.47, 493.13, 605.2, 846.43, 1360.53, 1326.77, 933.97, 528.57, 502.97, 491.63, 486.1, 475.47, 474.6, 508.9, 937.87, 2591.13, 3222.53, 2650.13, 938.77, 439.33, 411.43, 397.37, 394.8, 380.67, 363.83, 359.7, 351.27, 324.7, 323.67, 312.3, 299.2, 289.93, 272.7, 252.43, 254.7, 242.23, 234.27, 231.93, 221.9, 214.33, 207.17, 200.77, 193.57, 187.1, 180.1, 173.2, 161.3, 152.4, 146.67, 136.47, 130.77, 123.67, 113.43, 106.03, 104.13, 102.1, 99.07, 95.27, 93.87, 87.83, 89.03, 86.23, 83.27, 84.63, 77.23, 75.07, 77.6, 75.47, 72.03, 70.4, 68.57, 69.1, 71.1, 66.7, 65.3, 65.7, 62.47, 61.1, 60.2, 56.47, 60.93, 58.67, 58.3, 57.3, 54.4, 54.93, 56.33, 55, 56.2, 54.93, 53, 54.17, 68.43, 79.07, 85.27, 104.93, 183.4, 186.9, 115.9, 60.57, 58.8, 53.67, 57.33, 53, 52.73, 50.47, 49.8, 53.6, 50.2, 51.6, 51.83, 50.07, 52.13, 47.77, 50.4, 52.07, 56.7, 73.5, 171.23, 425.73, 581.33, 467.13, 216.8, 73.83, 51.3, 45.93, 44.73, 42.87, 42.33, 43.8, 40.57, 41.63, 40.63, 39.5, 38.67, 39.57, 38.5, 38.27, 39.2, 36.1, 36.37, 38.17, 36.87, 34.27, 33.7, 34.23, 33.87, 33.37, 35, 33.27, 32.3, 32.23, 31.23, 32, 30.33, 29.47, 29.2, 28.17, 27.47, 26.7, 28.7, 28.37, 28.17, 26.6, 25.9, 27.83, 28.4, 24.87, 26.2, 25.7, 24.93, 24.93, 24.73, 24.17, 23.27, 23.2, 23.33, 23.9, 22.93, 21.53, 23.43, 20.83, 22.53, 22.57, 20.6, 21.17, 20.67, 21.27, 22.43, 24.37, 21.67, 21.13, 22.1, 30.37, 35.47, 32.27, 22.07, 20.37, 17.7, 18.6, 18.73, 17.77, 19.23, 16.63, 16.33, 16.27, 16.97, 17.1, 15.1, 16.63, 16.17, 14.93, 16.8, 16.07, 16.1, 17.17, 16.5, 15.9, 16.23, 14.57, 15.4, 14.17, 15.57, 15.2, 15.03, 15.57, 16.53, 15.2, 16.97, 18.73, 30.7, 60.93, 70.87, 66.8, 47.5, 32.87, 18.93, 14.27, 13.47, 14, 13.03, 14.3, 12.57, 12.47, 12.8, 13.43, 11.27, 13, 12.57, 13, 12.23, 11.7, 12.83, 12.5, 12.3]

beta_22_24 = [5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7]
U_22 = [0.50,0.68,0.50,0.52,0.63, 1.30, 2.13, 4.9, 6.58, 9.03, 9.85,12.52,13.50,17.58,17.35,18.42,18.22,18.40,17.30,17.82,18.85]
U_24 = [1.57,3.38,4.53,7.73,9.82,13.42,14.87,17.6,18.23,20.83,19.68,21.93,23.77,30.62,29.93,30.45,29.20,27.15,25.17,25.92,27.93]

beta_26 = [4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3,6.4,6.5]
U_26 = [0.97,1.98,4.78,7.33,10.93,13.15,17.05,19.2,22.32,22.43,24.57,25.25,27.8,28.7,29.65,29.07,30.88,34.77,47.75,43.6,46.77]

beta_28 = [3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3,6.4,6.5]
U_28 = [1.23,0.93,1.05,1.23,1.75,3.4,7.67,12.45,16.15,20.63,22.82,26.35,28.65,29.45,30.75,31.55,31.57,34.45,34.3,36,36.8,37.3,36.25,38.58,43.7,66.95,61.17,58.15]

beta_30 = [3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6,6.1,6.2,6.3,6.4,6.5]
U_30 = [1.1,1.6,1.1,1.4,1.2,1.6,1.3,1.9,5,12.1,19.8,25.1,27.1,35.4,35.1,42.6,38.5,45,45.4,46,45.2,48.3,43.9,46.6,46.6,49.9,48.7,50.9,45.6,53.6,65.3,94.3,78.8,76]

beta_32_34_35 = [2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6]
U_32 = [1.2,1.3,1.2,1.3,1.4,1.3,1,1.4,1.9,1.5,2.1,2.7,5.2,11.2,22.2,31.8,40.2,45.5,53.6,54.8,58.3,55.8,63.1,57.8,59.1,56.6,64,58,62.4,57.4,59.5,56.8,61.3,57,58.6,53.5]
U_34 = [1.8,1.1,1.6,2,1.9,2.5,2,2.4,3.5,5.3,10.8,19.8,30,41.3,54.6,59.4,68.1,72.4,76.2,70.4,77,72.5,80.1,70.5,74.9,70.2,74.3,68.9,69.4,65.7,65.9,67.3,64.8,63.5,66.4,60.5]
U_35 = [1.6,1.5,2.1,2,1.7,2.5,4,4.2,7.8,12.4,23.9,30.1,42,51,60.9,66.5,74.3,78.5,79.8,76.2,80,75.5,77.8,72.9,77.8,74.5,75.5,72.3,77.1,73.8,71.6,68.3,67.6,65.2,70,63.1]



e = 1.602176634*10**-19
c = 2.99792458*10**10

#print(len(nacl_beta))
#print(len(kristall_beta))

f = open("nacl_tab.tex", "w")

for i in range(49):
    f.write(str(format(nacl_beta[i], '.1f')) + "\t&\t" + str(format(nacl_rate[i], '.2f')) + "\t&\t" +  str(format(nacl_beta[i+49], '.1f')) + "\t&\t" + str(format(nacl_rate[i+49], '.2f')) + "\t&\t" + str(format(nacl_beta[i+98], '.1f')) + "\t&\t" + str(format(nacl_rate[i+98], '.2f'))  + "\t&\t" + str(format(nacl_beta[i+147], '.1f')) + "\t&\t" + str(format(nacl_rate[i+147], '.2f')) + "\t&\t" + str(format(nacl_beta[i+196], '.1f')) + "\t&\t" + str(format(nacl_rate[i+196], '.2f')) + "\t&\t" + str(format(nacl_beta[i+245], '.1f')) + "\t&\t" + str(format(nacl_rate[i+245], '.2f')))
    f.write("\\\\\n")

f.close()



f = open("kristall_tab.tex", "w")

for i in range(49):
    f.write(str(format(kristall_beta[i], '.1f')) + "\t&\t" + str(format(kristall_rate[i], '.2f')) + "\t&\t" +  str(format(kristall_beta[i+49], '.1f')) + "\t&\t" + str(format(kristall_rate[i+49], '.2f')) + "\t&\t" + str(format(kristall_beta[i+98], '.1f')) + "\t&\t" + str(format(kristall_rate[i+98], '.2f'))  + "\t&\t" + str(format(kristall_beta[i+147], '.1f')) + "\t&\t" + str(format(kristall_rate[i+147], '.2f')) + "\t&\t" + str(format(kristall_beta[i+196], '.1f')) + "\t&\t" + str(format(kristall_rate[i+196], '.2f')) + "\t&\t" + str(format(kristall_beta[i+245], '.1f')) + "\t&\t" + str(format(kristall_rate[i+245], '.2f')) + "\t&\t")
    if i < len(kristall_beta) % 49:
        f.write(str(format(kristall_beta[i+294], '.1f')) + "\t&\t" + str(format(kristall_rate[i+294], '.2f')))
    f.write("\\\\\n")

f.close()




fig, ax = plt.subplots() 
#ax.axis([400, 800, 0, 1])
ax.plot(nacl_beta, nacl_rate, 'blue')
ax.plot(kristall_beta, kristall_rate, 'red')
ax.legend(['NaCl', 'unbekannter Kristall'])
ax.set_xlabel('beta / °')
ax.set_ylabel('rate / imp/s')
#ax.set_title('Aufgabe 1 a,  t=100 ns')
plt.savefig("daten.png")

#ax.set_title('Aufgabe 3,  t=100 ns')
#plt.savefig("bilder/task3/task3_100ns.png")
plt.close()



#print(find_max(nacl_beta, nacl_rate, 5))


fig, ax = plt.subplots() 
ax.axis([0, 32, 0, 550])
plt.axvline(x=6.3, ymin=0, ymax=550/550, color='orange')
plt.axvline(x=7.1, ymin=0, ymax=550/550, color='orange')

plt.axvline(x=12.8, ymin=0, ymax=550/550, color='orange')
plt.axvline(x=14.4, ymin=0, ymax=550/550, color='orange')

plt.axvline(x=19.4, ymin=0, ymax=550/550, color='orange')
plt.axvline(x=21.9, ymin=0, ymax=550/550, color='orange')

plt.axvline(x=26.4, ymin=0, ymax=550/550, color='orange')
plt.axvline(x=29.9, ymin=0, ymax=550/550, color='orange')

ax.plot(nacl_beta, nacl_rate, 'blue')

#ax.plot(kristall_beta, kristall_rate, 'red')
#ax.legend(['NaCl', 'unbekannter Kristall'])
ax.set_xlabel('beta / °')
ax.set_ylabel('rate / imp/s')
#ax.set_title('Aufgabe 1 a,  t=100 ns')
plt.savefig("daten_nacl.png")

#ax.set_title('Aufgabe 3,  t=100 ns')
#plt.savefig("bilder/task3/task3_100ns.png")
plt.close()






#print(find_max(kristall_beta, kristall_rate, 5))





fig, ax = plt.subplots() 
ax.axis([0, 34, 0, 3500])
plt.axvline(x=9, ymin=0, ymax=3500/3500, color='orange')
plt.axvline(x=10.2, ymin=0, ymax=3500/3500, color='orange')

plt.axvline(x=18.3, ymin=0, ymax=3500/3500, color='orange')
plt.axvline(x=20.6, ymin=0, ymax=3500/3500, color='orange')

plt.axvline(x=28.0, ymin=0, ymax=3500/3500, color='orange')
plt.axvline(x=31.8, ymin=0, ymax=3500/3500, color='orange')


ax.plot(kristall_beta, kristall_rate, 'red')
#ax.legend(['NaCl', 'unbekannter Kristall'])
ax.set_xlabel('beta / °')
ax.set_ylabel('rate / imp/s')
#ax.set_title('Aufgabe 1 a,  t=100 ns')
plt.savefig("daten_kristall.png")

#ax.set_title('Aufgabe 3,  t=100 ns')
#plt.savefig("bilder/task3/task3_100ns.png")
plt.close()







fig, ax = plt.subplots() 
#ax.axis([0, 34, 0, 3500])


ax.plot(beta_22_24, U_22, 'black')
ax.plot(beta_22_24, U_24, '#FF0000')
ax.plot(beta_26, U_26, '#FFA500')
ax.plot(beta_28, U_28, '#FFFF00')
ax.plot(beta_30, U_30, '#00FF00')
ax.plot(beta_32_34_35, U_32, '#00FFFF')
ax.plot(beta_32_34_35, U_34, '#0000FF')
ax.plot(beta_32_34_35, U_35, '#800080')
ax.legend(['22 kV', '24 kV', '26 kV', '28 kV', '30 kV', '32 kV', '34 kV', '35 kV'])
ax.set_xlabel('beta / °')
ax.set_ylabel('rate / imp/s')
#ax.set_title('Aufgabe 1 a,  t=100 ns')
plt.savefig("planck.png")






br22 = beta_22_24[5:-7]
Ur22 = U_22[5:-7]


br24 = beta_22_24[1:-11]
Ur24 = U_24[1:-11]


br26 = beta_26[1:-12]
Ur26 = U_26[1:-12]



br28 = beta_28[5:-16]
Ur28 = U_28[5:-16]

br30 = beta_30[7:-22]
Ur30 = U_30[7:-22]



br32 = beta_32_34_35[12:-17]
Ur32 = U_32[12:-17]

br34 = beta_32_34_35[9:-20]
Ur34 = U_34[9:-20]


br35 = beta_32_34_35[9:-20]
Ur35 = U_35[9:-20]


k22, d22 = regression(br22, Ur22)
k24, d24 = regression(br24, Ur24)
k26, d26 = regression(br26, Ur26)
k28, d28 = regression(br28, Ur28)
k30, d30 = regression(br30, Ur30)
k32, d32 = regression(br32, Ur32)
k34, d34 = regression(br34, Ur34)
k35, d35 = regression(br35, Ur35)


a_nacl = 571.4 #pm

print("22 & " + str('%.2f' % (-d22/k22)) + " & " + str('%.2f' % (a_nacl*sin(-d22/k22/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*22000/c*a_nacl*sin(-d22/k22/180 * 3.1415926)) ) + " \\\\")
print("24 & " + str('%.2f' % (-d24/k24)) + " & " + str('%.2f' % (a_nacl*sin(-d24/k24/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*24000/c*a_nacl*sin(-d24/k24/180 * 3.1415926)) ) + " \\\\")
print("26 & " + str('%.2f' % (-d26/k26)) + " & " + str('%.2f' % (a_nacl*sin(-d26/k26/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*26000/c*a_nacl*sin(-d26/k26/180 * 3.1415926)) ) + " \\\\")
print("28 & " + str('%.2f' % (-d28/k28)) + " & " + str('%.2f' % (a_nacl*sin(-d28/k28/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*28000/c*a_nacl*sin(-d28/k28/180 * 3.1415926)) ) + " \\\\")
print("30 & " + str('%.2f' % (-d30/k30)) + " & " + str('%.2f' % (a_nacl*sin(-d30/k30/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*30000/c*a_nacl*sin(-d30/k30/180 * 3.1415926)) ) + " \\\\")
print("32 & " + str('%.2f' % (-d32/k32)) + " & " + str('%.2f' % (a_nacl*sin(-d32/k32/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*32000/c*a_nacl*sin(-d32/k32/180 * 3.1415926)) ) + " \\\\")
print("34 & " + str('%.2f' % (-d34/k34)) + " & " + str('%.2f' % (a_nacl*sin(-d34/k34/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*34000/c*a_nacl*sin(-d34/k34/180 * 3.1415926)) ) + " \\\\")
print("35 & " + str('%.2f' % (-d35/k35)) + " & " + str('%.2f' % (a_nacl*sin(-d35/k35/180 * 3.1415926)) ) + " & " + str('%.2f' % (10**24*e*35000/c*a_nacl*sin(-d35/k35/180 * 3.1415926)) ))

br22.insert(0,-d22/k22)
Ur22.insert(0,0)
br24.insert(0,-d24/k24)
Ur24.insert(0,0)
br26.insert(0,-d26/k26)
Ur26.insert(0,0)
br28.insert(0,-d28/k28)
Ur28.insert(0,0)
br30.insert(0,-d30/k30)
Ur30.insert(0,0)
br32.insert(0,-d32/k32)
Ur32.insert(0,0)
br34.insert(0,-d34/k34)
Ur34.insert(0,0)
br35.insert(0,-d35/k35)
Ur35.insert(0,0)

fig, ax = plt.subplots() 
#ax.axis([0, 34, 0, 3500])



ax.plot(br22, Ur22, 'black')
ax.plot(br24, Ur24, '#FF0000')
ax.plot(br26, Ur26, '#FFA500')
ax.plot(br28, Ur28, '#FFFF00')
ax.plot(br30, Ur30, '#00FF00')
ax.plot(br32, Ur32, '#00FFFF')
ax.plot(br34, Ur34, '#0000FF')
ax.plot(br35, Ur35, '#800080')

ax.plot(beta_22_24, U_22, 'black', alpha=.1)
ax.plot(beta_22_24, U_24, '#FF0000', alpha=.1)
ax.plot(beta_26, U_26, '#FFA500', alpha=.1)
ax.plot(beta_28, U_28, '#FFFF00', alpha=.1)
ax.plot(beta_30, U_30, '#00FF00', alpha=.1)
ax.plot(beta_32_34_35, U_32, '#00FFFF', alpha=.1)
ax.plot(beta_32_34_35, U_34, '#0000FF', alpha=.1)
ax.plot(beta_32_34_35, U_35, '#800080', alpha=.1)

ax.plot(br22, k22*np.array(br22)+d22)
ax.plot(br24, k24*np.array(br24)+d24)
ax.plot(br26, k26*np.array(br26)+d26)
ax.plot(br28, k28*np.array(br28)+d28)
ax.plot(br30, k30*np.array(br30)+d30)
ax.plot(br32, k32*np.array(br32)+d32)
ax.plot(br34, k34*np.array(br34)+d34)
ax.plot(br35, k35*np.array(br35)+d35)

ax.legend(['22 kV', '24 kV', '26 kV', '28 kV', '30 kV', '32 kV', '34 kV', '35 kV'])
ax.set_xlabel('beta / °')
ax.set_ylabel('rate / imp/s')
#ax.set_title('Aufgabe 1 a,  t=100 ns')
plt.savefig("planck_regression.png")

plt.close()
